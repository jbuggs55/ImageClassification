{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Developing an AI application\n",
    "\n",
    "Going forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you'd use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. \n",
    "\n",
    "In this project, you'll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you'd train this classifier, then export it for use in your application. We'll be using [this dataset](http://www.robots.ox.ac.uk/~vgg/data/flowers/102/index.html) of 102 flower categories, you can see a few examples below. \n",
    "\n",
    "<img src='assets/Flowers.png' width=500px>\n",
    "\n",
    "The project is broken down into multiple steps:\n",
    "\n",
    "* Load and preprocess the image dataset\n",
    "* Train the image classifier on your dataset\n",
    "* Use the trained classifier to predict image content\n",
    "\n",
    "We'll lead you through each part which you'll implement in Python.\n",
    "\n",
    "When you've completed this project, you'll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new.\n",
    "\n",
    "First up is importing the packages you'll need. It's good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports here\n",
    "\n",
    "import torch\n",
    "import os\n",
    "import numpy as np\n",
    "from torch import nn\n",
    "from torch import optim\n",
    "import torch.nn.functional as F\n",
    "from torchvision import datasets,transforms, models\n",
    "from collections import OrderedDict\n",
    "import time\n",
    "import json\n",
    "import itertools\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data\n",
    "\n",
    "Here you'll use `torchvision` to load the data ([documentation](http://pytorch.org/docs/0.3.0/torchvision/index.html)). The data should be included alongside this notebook, otherwise you can [download it here](https://s3.amazonaws.com/content.udacity-data.com/nd089/flower_data.tar.gz). The dataset is split into three parts, training, validation, and testing. For the training, you'll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You'll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks.\n",
    "\n",
    "The validation and testing sets are used to measure the model's performance on data it hasn't seen yet. For this you don't want any scaling or rotation transformations, but you'll need to resize then crop the images to the appropriate size.\n",
    "\n",
    "The pre-trained networks you'll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'flowers'\n",
    "train_dir = data_dir + '/train'\n",
    "valid_dir = data_dir + '/valid'\n",
    "test_dir = data_dir + '/test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your transforms for the training, validation, and testing sets\n",
    "train_transforms = transforms.Compose([transforms.RandomResizedCrop(224),\n",
    "                                       transforms.RandomRotation(20),\n",
    "                                       transforms.RandomHorizontalFlip(0.5),\n",
    "                                       transforms.ToTensor(),\n",
    "                                       transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n",
    "                                      ])\n",
    "\n",
    "#No random operations\n",
    "validation_transforms = transforms.Compose([\n",
    "                                       transforms.Resize(256),\n",
    "                                       transforms.CenterCrop(224),\n",
    "                                       transforms.ToTensor(),\n",
    "                                       transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n",
    "                                      ])\n",
    "\n",
    "test_transforms = transforms.Compose([\n",
    "                                       transforms.Resize(256),\n",
    "                                       transforms.CenterCrop(224),\n",
    "                                       transforms.ToTensor(),\n",
    "                                       transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n",
    "                                      ])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# TODO: Load the datasets with ImageFolder\n",
    "train_img_ds = datasets.ImageFolder(data_dir +'/train', transform=train_transforms)\n",
    "val_img_ds = datasets.ImageFolder(data_dir + '/valid', transform=validation_transforms)\n",
    "test_img_ds = datasets.ImageFolder(data_dir + '/test', transform=test_transforms)\n",
    "\n",
    "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
    "train_dataloader= torch.utils.data.DataLoader(train_img_ds, batch_size = 64, shuffle=True)\n",
    "val_dataloader = torch.utils.data.DataLoader(val_img_ds, batch_size = 32, shuffle=True)\n",
    "test_dataloader = torch.utils.data.DataLoader(test_img_ds, batch_size = 32, shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label mapping\n",
    "\n",
    "You'll also need to load in a mapping from category label to category name. You can find this in the file `cat_to_name.json`. It's a JSON object which you can read in with the [`json` module](https://docs.python.org/2/library/json.html). This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('cat_to_name.json', 'r') as f:\n",
    "    cat_to_name = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1': 'pink primrose',\n",
       " '16': 'globe-flower',\n",
       " '21': 'fire lily',\n",
       " '25': 'grape hyacinth',\n",
       " '26': 'corn poppy',\n",
       " '27': 'prince of wales feathers',\n",
       " '3': 'canterbury bells',\n",
       " '34': 'mexican aster',\n",
       " '45': 'bolero deep blue',\n",
       " '7': 'moon orchid'}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict(itertools.islice(cat_to_name.items(),10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building and training the classifier\n",
    "\n",
    "Now that the data is ready, it's time to build and train the classifier. As usual, you should use one of the pretrained models from `torchvision.models` to get the image features. Build and train a new feed-forward classifier using those features.\n",
    "\n",
    "We're going to leave this part up to you. If you want to talk through it with someone, chat with your fellow students! You can also ask questions on the forums or join the instructors in office hours.\n",
    "\n",
    "Refer to [the rubric](https://review.udacity.com/#!/rubrics/1663/view) for guidance on successfully completing this section. Things you'll need to do:\n",
    "\n",
    "* Load a [pre-trained network](http://pytorch.org/docs/master/torchvision/models.html) (If you need a starting point, the VGG networks work great and are straightforward to use)\n",
    "* Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout\n",
    "* Train the classifier layers using backpropagation using the pre-trained network to get the features\n",
    "* Track the loss and accuracy on the validation set to determine the best hyperparameters\n",
    "\n",
    "We've left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You'll likely find that as you work through each part, you'll need to go back and modify your previous code. This is totally normal!\n",
    "\n",
    "When training make sure you're updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/vgg19-dcbb9e9d.pth\" to /root/.torch/models/vgg19-dcbb9e9d.pth\n",
      "100%|██████████| 574673361/574673361 [00:18<00:00, 31879932.72it/s]\n"
     ]
    }
   ],
   "source": [
    "# TODO: Build and train your network\n",
    "model = models.vgg19(pretrained=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to calculate accuracy and loss on validation data\n",
    "def validation(model, dataloader, criterion):\n",
    "    loss = 0\n",
    "    accuracy = 0\n",
    "    for (inputs, labels) in dataloader:\n",
    "        inputs, labels= inputs.to('cuda'), labels.to('cuda')\n",
    "        \n",
    "        #forward\n",
    "        output = model.forward(inputs)\n",
    "        loss += criterion(output, labels).item()\n",
    "        \n",
    "        ps = torch.exp(output)\n",
    "        # grab the maximum probability for each tensor and compare to the associated label.\n",
    "        # The result here will be a tensor of 0's and 1's. \n",
    "        equality = (labels.data == ps.max(dim=1)[1])\n",
    "        #Convert equality tensor to a float, take mean to determine accuracy\n",
    "        accuracy += equality.type(FloatTensor).mean()\n",
    "        \n",
    "        \n",
    "    return loss, accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create Neural Net Classifier\n",
    "def build_classifier(input_size, hidden_sizes, output_size, drop_out):\n",
    "        classifier = nn.Sequential(\n",
    "                    nn.Linear(input_size, hidden_sizes[0]),\n",
    "                    nn.ReLU(),\n",
    "                    nn.Dropout(p = drop_out),\n",
    "                    nn.Linear(hidden_sizes[0], hidden_sizes[1]),\n",
    "                    nn.ReLU(),\n",
    "                    nn.Dropout(p = drop_out),\n",
    "                    nn.Linear(hidden_sizes[1], hidden_sizes[2]),\n",
    "                    nn.ReLU(),\n",
    "                    nn.Dropout(p = drop_out),\n",
    "                    nn.Linear(hidden_sizes[2], output_size),\n",
    "                    nn.LogSoftmax(dim=1))\n",
    "        return classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier = build_classifier(25088, [4096, 2048, 512], 102, 0.25)    \n",
    "model.classifier = classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hyperparameters\n",
    "#establish loss criteria used to train classifier only\n",
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.classifier.parameters(), lr =0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_model(model, train_dataloader, val_dataloader, criterion, optimizer, epochs = 8, print_every = 10, engine ='gpu'):\n",
    "    \n",
    "    steps = 0\n",
    "    model.to(engine)\n",
    "    \n",
    "    for e in range(epochs):\n",
    "        model.train()\n",
    "        running_loss = 0\n",
    "        for (inputs,labels) in train_dataloader:\n",
    "            steps +=1\n",
    "            inputs, labels = inputs.to(engine), labels.to(engine)\n",
    "            #ensure gradients are not carried forward\n",
    "            optimizer.zero_grad()\n",
    "            #forward pass\n",
    "            outputs = model.forward(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            #update weights\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            #update loss\n",
    "            running_loss += loss.item()\n",
    "\n",
    "            if steps % print_every == 0:\n",
    "                model.eval()\n",
    "                with torch.no_grad():\n",
    "                    val_accuracy, val_loss = validation(model, val_dataloader)\n",
    "                print(\n",
    "                    \"Epoch {}/{}\".format(e+1, range(epochs)),\n",
    "                    \"Training Loss {:.3f}\".format(running_loss/print_every),\n",
    "                    \"Val Acc {:.3f}\".format(val_accuracy/len(val_dataloader)),\n",
    "                    \"Val Loss {:.3f}\".format(val_loss/len(val_dataloader))\n",
    "                                        )\n",
    "               \n",
    "                running_loss = 0\n",
    "                model.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train\n",
    "#Ensure the pretrained network is not updated during training\n",
    "def train_model(model, train_dataloader, val_dataloader,epochs, print_every, criterion, optimizer):\n",
    "    steps = 0\n",
    "    model.to('cuda')\n",
    "    start = time.time()\n",
    "    for e in range(epochs):\n",
    "        model.train()\n",
    "        running_loss = 0\n",
    "        for (inputs, labels) in train_dataloader:\n",
    "            steps += 1\n",
    "            inputs, labels= inputs.to('cuda'), labels.to('cuda')\n",
    "            optimizer.zero_grad()\n",
    "            \n",
    "            #forward pass\n",
    "            output = model.forward(inputs)\n",
    "            loss = criterion(output, labels)\n",
    "            \n",
    "            #backward pass\n",
    "            loss.backward() \n",
    "            \n",
    "            #update weights\n",
    "            optimizer.step()\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "\n",
    "            if steps % print_every == 0:\n",
    "                end = time.time()\n",
    "                # Make sure network is in eval mode for inference\n",
    "                model.eval()\n",
    "                # Turn off gradients for validation, saves memory and computations\n",
    "                with torch.no_grad():\n",
    "                    val_loss, val_accuracy = validation(model, val_dataloader, criterion)\n",
    "                print(\n",
    "                    \"Epoch: {}/{}... \".format(e+1, epochs),\n",
    "                    \"Time Elapsed: {:.3f}.. \".format(end - start),\n",
    "                    \"Train Loss: {:.4f}\".format(running_loss/print_every),\n",
    "                    \"Val Loss {:.4f}\".format(val_loss/len(val_dataloader)),\n",
    "                    \"Val Accuracy {:.3f}\".format(val_accuracy/len(val_dataloader))\n",
    "                    )\n",
    "                running_loss = 0\n",
    "                model.train()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1/8...  Time Elapsed: 15.174..  Train Loss: 4.7560 Val Loss 4.4942 Val Accuracy 0.022\n",
      "Epoch: 1/8...  Time Elapsed: 51.323..  Train Loss: 4.4879 Val Loss 4.3943 Val Accuracy 0.068\n",
      "Epoch: 1/8...  Time Elapsed: 88.098..  Train Loss: 4.4039 Val Loss 4.0888 Val Accuracy 0.069\n",
      "Epoch: 1/8...  Time Elapsed: 125.088..  Train Loss: 4.1921 Val Loss 3.8178 Val Accuracy 0.126\n",
      "Epoch: 1/8...  Time Elapsed: 162.424..  Train Loss: 3.8547 Val Loss 3.4416 Val Accuracy 0.178\n",
      "Epoch: 1/8...  Time Elapsed: 199.183..  Train Loss: 3.6414 Val Loss 3.3189 Val Accuracy 0.210\n",
      "Epoch: 1/8...  Time Elapsed: 236.163..  Train Loss: 3.5974 Val Loss 2.9583 Val Accuracy 0.247\n",
      "Epoch: 1/8...  Time Elapsed: 273.558..  Train Loss: 3.2451 Val Loss 2.8707 Val Accuracy 0.275\n",
      "Epoch: 1/8...  Time Elapsed: 310.835..  Train Loss: 3.0801 Val Loss 2.4310 Val Accuracy 0.361\n",
      "Epoch: 1/8...  Time Elapsed: 347.947..  Train Loss: 2.9493 Val Loss 2.2258 Val Accuracy 0.394\n",
      "Epoch: 2/8...  Time Elapsed: 384.127..  Train Loss: 1.9720 Val Loss 2.1924 Val Accuracy 0.422\n",
      "Epoch: 2/8...  Time Elapsed: 421.416..  Train Loss: 2.6327 Val Loss 2.0185 Val Accuracy 0.448\n",
      "Epoch: 2/8...  Time Elapsed: 458.740..  Train Loss: 2.6032 Val Loss 1.9383 Val Accuracy 0.470\n",
      "Epoch: 2/8...  Time Elapsed: 495.933..  Train Loss: 2.4266 Val Loss 1.8648 Val Accuracy 0.489\n",
      "Epoch: 2/8...  Time Elapsed: 532.748..  Train Loss: 2.5534 Val Loss 1.7429 Val Accuracy 0.538\n",
      "Epoch: 2/8...  Time Elapsed: 569.803..  Train Loss: 2.4194 Val Loss 1.7342 Val Accuracy 0.511\n",
      "Epoch: 2/8...  Time Elapsed: 606.970..  Train Loss: 2.3192 Val Loss 1.6854 Val Accuracy 0.515\n",
      "Epoch: 2/8...  Time Elapsed: 644.397..  Train Loss: 2.3011 Val Loss 1.6247 Val Accuracy 0.525\n",
      "Epoch: 2/8...  Time Elapsed: 681.513..  Train Loss: 2.1365 Val Loss 1.5929 Val Accuracy 0.548\n",
      "Epoch: 2/8...  Time Elapsed: 718.534..  Train Loss: 2.1315 Val Loss 1.4236 Val Accuracy 0.584\n",
      "Epoch: 3/8...  Time Elapsed: 755.069..  Train Loss: 0.6934 Val Loss 1.4123 Val Accuracy 0.590\n",
      "Epoch: 3/8...  Time Elapsed: 792.332..  Train Loss: 2.0931 Val Loss 1.4905 Val Accuracy 0.576\n",
      "Epoch: 3/8...  Time Elapsed: 829.292..  Train Loss: 2.1180 Val Loss 1.4270 Val Accuracy 0.597\n",
      "Epoch: 3/8...  Time Elapsed: 866.255..  Train Loss: 2.1145 Val Loss 1.3485 Val Accuracy 0.622\n",
      "Epoch: 3/8...  Time Elapsed: 903.259..  Train Loss: 2.1350 Val Loss 1.3633 Val Accuracy 0.612\n",
      "Epoch: 3/8...  Time Elapsed: 940.456..  Train Loss: 1.8935 Val Loss 1.2954 Val Accuracy 0.640\n",
      "Epoch: 3/8...  Time Elapsed: 977.601..  Train Loss: 1.8299 Val Loss 1.2640 Val Accuracy 0.639\n",
      "Epoch: 3/8...  Time Elapsed: 1014.843..  Train Loss: 1.9069 Val Loss 1.1728 Val Accuracy 0.667\n",
      "Epoch: 3/8...  Time Elapsed: 1052.139..  Train Loss: 1.7560 Val Loss 1.1547 Val Accuracy 0.658\n",
      "Epoch: 3/8...  Time Elapsed: 1089.281..  Train Loss: 1.9119 Val Loss 1.2415 Val Accuracy 0.645\n",
      "Epoch: 4/8...  Time Elapsed: 1125.659..  Train Loss: 0.1551 Val Loss 1.2070 Val Accuracy 0.653\n",
      "Epoch: 4/8...  Time Elapsed: 1162.568..  Train Loss: 1.8234 Val Loss 1.1454 Val Accuracy 0.670\n",
      "Epoch: 4/8...  Time Elapsed: 1199.674..  Train Loss: 1.6860 Val Loss 1.1335 Val Accuracy 0.673\n",
      "Epoch: 4/8...  Time Elapsed: 1236.837..  Train Loss: 1.7339 Val Loss 1.0885 Val Accuracy 0.689\n",
      "Epoch: 4/8...  Time Elapsed: 1274.099..  Train Loss: 1.7754 Val Loss 1.1040 Val Accuracy 0.681\n",
      "Epoch: 4/8...  Time Elapsed: 1311.098..  Train Loss: 1.7816 Val Loss 1.0781 Val Accuracy 0.702\n",
      "Epoch: 4/8...  Time Elapsed: 1348.418..  Train Loss: 1.7826 Val Loss 1.0197 Val Accuracy 0.720\n",
      "Epoch: 4/8...  Time Elapsed: 1385.640..  Train Loss: 1.6771 Val Loss 1.0644 Val Accuracy 0.696\n",
      "Epoch: 4/8...  Time Elapsed: 1422.677..  Train Loss: 1.6746 Val Loss 1.0055 Val Accuracy 0.705\n",
      "Epoch: 4/8...  Time Elapsed: 1459.768..  Train Loss: 1.7470 Val Loss 1.0541 Val Accuracy 0.700\n",
      "Epoch: 4/8...  Time Elapsed: 1496.875..  Train Loss: 1.7253 Val Loss 1.0565 Val Accuracy 0.691\n",
      "Epoch: 5/8...  Time Elapsed: 1533.477..  Train Loss: 1.3608 Val Loss 0.9698 Val Accuracy 0.730\n",
      "Epoch: 5/8...  Time Elapsed: 1570.816..  Train Loss: 1.6568 Val Loss 0.9879 Val Accuracy 0.724\n",
      "Epoch: 5/8...  Time Elapsed: 1607.806..  Train Loss: 1.6127 Val Loss 0.9569 Val Accuracy 0.710\n",
      "Epoch: 5/8...  Time Elapsed: 1644.805..  Train Loss: 1.6356 Val Loss 1.0309 Val Accuracy 0.719\n",
      "Epoch: 5/8...  Time Elapsed: 1682.016..  Train Loss: 1.5662 Val Loss 0.9461 Val Accuracy 0.733\n",
      "Epoch: 5/8...  Time Elapsed: 1719.060..  Train Loss: 1.5450 Val Loss 0.9828 Val Accuracy 0.707\n",
      "Epoch: 5/8...  Time Elapsed: 1756.197..  Train Loss: 1.5963 Val Loss 0.9380 Val Accuracy 0.730\n",
      "Epoch: 5/8...  Time Elapsed: 1792.896..  Train Loss: 1.7162 Val Loss 0.9464 Val Accuracy 0.737\n",
      "Epoch: 5/8...  Time Elapsed: 1830.126..  Train Loss: 1.5782 Val Loss 0.9176 Val Accuracy 0.754\n",
      "Epoch: 5/8...  Time Elapsed: 1867.236..  Train Loss: 1.4715 Val Loss 0.9004 Val Accuracy 0.733\n",
      "Epoch: 6/8...  Time Elapsed: 1903.872..  Train Loss: 0.7543 Val Loss 0.8415 Val Accuracy 0.756\n",
      "Epoch: 6/8...  Time Elapsed: 1940.782..  Train Loss: 1.3861 Val Loss 0.8627 Val Accuracy 0.754\n",
      "Epoch: 6/8...  Time Elapsed: 1977.860..  Train Loss: 1.4909 Val Loss 0.9944 Val Accuracy 0.707\n",
      "Epoch: 6/8...  Time Elapsed: 2015.207..  Train Loss: 1.4614 Val Loss 0.8653 Val Accuracy 0.753\n",
      "Epoch: 6/8...  Time Elapsed: 2052.591..  Train Loss: 1.3735 Val Loss 0.8261 Val Accuracy 0.756\n",
      "Epoch: 6/8...  Time Elapsed: 2089.784..  Train Loss: 1.3934 Val Loss 1.0195 Val Accuracy 0.716\n",
      "Epoch: 6/8...  Time Elapsed: 2126.565..  Train Loss: 1.4731 Val Loss 0.8638 Val Accuracy 0.747\n",
      "Epoch: 6/8...  Time Elapsed: 2163.739..  Train Loss: 1.6375 Val Loss 0.8507 Val Accuracy 0.749\n",
      "Epoch: 6/8...  Time Elapsed: 2201.008..  Train Loss: 1.5597 Val Loss 0.8313 Val Accuracy 0.760\n",
      "Epoch: 6/8...  Time Elapsed: 2238.302..  Train Loss: 1.4439 Val Loss 0.7928 Val Accuracy 0.771\n",
      "Epoch: 7/8...  Time Elapsed: 2274.504..  Train Loss: 0.2842 Val Loss 0.8200 Val Accuracy 0.778\n",
      "Epoch: 7/8...  Time Elapsed: 2311.372..  Train Loss: 1.3970 Val Loss 0.8836 Val Accuracy 0.753\n",
      "Epoch: 7/8...  Time Elapsed: 2348.593..  Train Loss: 1.4221 Val Loss 0.8387 Val Accuracy 0.743\n",
      "Epoch: 7/8...  Time Elapsed: 2385.906..  Train Loss: 1.2373 Val Loss 0.7976 Val Accuracy 0.774\n",
      "Epoch: 7/8...  Time Elapsed: 2423.057..  Train Loss: 1.5018 Val Loss 0.8303 Val Accuracy 0.769\n",
      "Epoch: 7/8...  Time Elapsed: 2459.861..  Train Loss: 1.3727 Val Loss 0.8345 Val Accuracy 0.773\n",
      "Epoch: 7/8...  Time Elapsed: 2497.099..  Train Loss: 1.4285 Val Loss 0.8218 Val Accuracy 0.774\n",
      "Epoch: 7/8...  Time Elapsed: 2534.442..  Train Loss: 1.3552 Val Loss 0.8227 Val Accuracy 0.767\n",
      "Epoch: 7/8...  Time Elapsed: 2571.782..  Train Loss: 1.5637 Val Loss 0.8473 Val Accuracy 0.749\n",
      "Epoch: 7/8...  Time Elapsed: 2608.861..  Train Loss: 1.4866 Val Loss 0.8058 Val Accuracy 0.754\n",
      "Epoch: 7/8...  Time Elapsed: 2645.708..  Train Loss: 1.4309 Val Loss 0.7822 Val Accuracy 0.782\n",
      "Epoch: 8/8...  Time Elapsed: 2682.157..  Train Loss: 1.2324 Val Loss 0.7795 Val Accuracy 0.794\n",
      "Epoch: 8/8...  Time Elapsed: 2719.416..  Train Loss: 1.3644 Val Loss 0.7687 Val Accuracy 0.794\n",
      "Epoch: 8/8...  Time Elapsed: 2756.386..  Train Loss: 1.4481 Val Loss 0.8545 Val Accuracy 0.773\n",
      "Epoch: 8/8...  Time Elapsed: 2793.537..  Train Loss: 1.4494 Val Loss 0.7766 Val Accuracy 0.778\n",
      "Epoch: 8/8...  Time Elapsed: 2830.585..  Train Loss: 1.3857 Val Loss 0.7885 Val Accuracy 0.779\n",
      "Epoch: 8/8...  Time Elapsed: 2867.715..  Train Loss: 1.4512 Val Loss 0.7652 Val Accuracy 0.800\n",
      "Epoch: 8/8...  Time Elapsed: 2904.848..  Train Loss: 1.4035 Val Loss 0.7280 Val Accuracy 0.800\n",
      "Epoch: 8/8...  Time Elapsed: 2942.063..  Train Loss: 1.3891 Val Loss 0.7372 Val Accuracy 0.786\n",
      "Epoch: 8/8...  Time Elapsed: 2979.228..  Train Loss: 1.3871 Val Loss 0.7394 Val Accuracy 0.795\n",
      "Epoch: 8/8...  Time Elapsed: 3016.206..  Train Loss: 1.2492 Val Loss 0.7485 Val Accuracy 0.784\n"
     ]
    }
   ],
   "source": [
    "train_model(model, train_dataloader,val_dataloader, 8, 10, criterion, optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing your network\n",
    "\n",
    "It's good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model's performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Do validation on the test set\n",
    "def test_model(model, data_loader):\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in data_loader:\n",
    "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
    "            output = model(inputs)\n",
    "            _, prediction = torch.max(output.data, dim=1)\n",
    "            correct += (prediction == labels).sum().item()\n",
    "            total += labels.size(0)\n",
    "            accuracy = 100 * correct/total\n",
    "        print(\"Accuracy {:.2f}\".format(accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Input type (torch.cuda.FloatTensor) and weight type (torch.FloatTensor) should be the same",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-ed63c6f2c3a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_dataloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-13-0128854fd0a2>\u001b[0m in \u001b[0;36mtest_model\u001b[0;34m(model, data_loader)\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m             \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cuda'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cuda'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m             \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m             \u001b[0mcorrect\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mprediction\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/vgg.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    299\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m         return F.conv2d(input, self.weight, self.bias, self.stride,\n\u001b[0;32m--> 301\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Input type (torch.cuda.FloatTensor) and weight type (torch.FloatTensor) should be the same"
     ]
    }
   ],
   "source": [
    "test_model(model, test_dataloader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save the checkpoint\n",
    "\n",
    "Now that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: `image_datasets['train'].class_to_idx`. You can attach this to the model as an attribute which makes inference easier later on.\n",
    "\n",
    "```model.class_to_idx = image_datasets['train'].class_to_idx```\n",
    "\n",
    "Remember that you'll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you'll want to save the number of epochs as well as the optimizer state, `optimizer.state_dict`. You'll likely want to use this trained model in the next part of the project, so best to save it now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "checkpoint/checkpoint.pth\n"
     ]
    }
   ],
   "source": [
    "# TODO: Save the checkpoint \n",
    "checkpoint_path = os.path.join('checkpoint', 'checkpoint.pth')\n",
    "print (checkpoint_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "checkpoint = {\n",
    "    'input_size':25088,\n",
    "    'hidden_layers': [4096, 2048, 512],\n",
    "    'output':102,\n",
    "    'dropout': .25,\n",
    "    'state_dict': model.state_dict(),\n",
    "    'class_to_idx': train_img_ds.class_to_idx,\n",
    "    'optimizer': optimizer.state_dict(),\n",
    "    'epochs':8\n",
    "}\n",
    "\n",
    "if not os.path.exists('checkpoint'):\n",
    "    os.makedirs('checkpoint')\n",
    "torch.save(checkpoint, checkpoint_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VGG(\n",
      "  (features): Sequential(\n",
      "    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (1): ReLU(inplace)\n",
      "    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (3): ReLU(inplace)\n",
      "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (6): ReLU(inplace)\n",
      "    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (8): ReLU(inplace)\n",
      "    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (11): ReLU(inplace)\n",
      "    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (13): ReLU(inplace)\n",
      "    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (15): ReLU(inplace)\n",
      "    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (17): ReLU(inplace)\n",
      "    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (20): ReLU(inplace)\n",
      "    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (22): ReLU(inplace)\n",
      "    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (24): ReLU(inplace)\n",
      "    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (26): ReLU(inplace)\n",
      "    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (29): ReLU(inplace)\n",
      "    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (31): ReLU(inplace)\n",
      "    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (33): ReLU(inplace)\n",
      "    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (35): ReLU(inplace)\n",
      "    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (classifier): Sequential(\n",
      "    (0): Linear(in_features=25088, out_features=4096, bias=True)\n",
      "    (1): ReLU(inplace)\n",
      "    (2): Dropout(p=0.5)\n",
      "    (3): Linear(in_features=4096, out_features=4096, bias=True)\n",
      "    (4): ReLU(inplace)\n",
      "    (5): Dropout(p=0.5)\n",
      "    (6): Linear(in_features=4096, out_features=1000, bias=True)\n",
      "  )\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "print (model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the checkpoint\n",
    "\n",
    "At this point it's good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VGG(\n",
      "  (features): Sequential(\n",
      "    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (1): ReLU(inplace)\n",
      "    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (3): ReLU(inplace)\n",
      "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (6): ReLU(inplace)\n",
      "    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (8): ReLU(inplace)\n",
      "    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (11): ReLU(inplace)\n",
      "    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (13): ReLU(inplace)\n",
      "    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (15): ReLU(inplace)\n",
      "    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (17): ReLU(inplace)\n",
      "    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (20): ReLU(inplace)\n",
      "    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (22): ReLU(inplace)\n",
      "    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (24): ReLU(inplace)\n",
      "    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (26): ReLU(inplace)\n",
      "    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (29): ReLU(inplace)\n",
      "    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (31): ReLU(inplace)\n",
      "    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (33): ReLU(inplace)\n",
      "    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (35): ReLU(inplace)\n",
      "    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
      "  )\n",
      "  (classifier): Sequential(\n",
      "    (0): Linear(in_features=25088, out_features=4096, bias=True)\n",
      "    (1): ReLU()\n",
      "    (2): Dropout(p=0.25)\n",
      "    (3): Linear(in_features=4096, out_features=2048, bias=True)\n",
      "    (4): ReLU()\n",
      "    (5): Dropout(p=0.25)\n",
      "    (6): Linear(in_features=2048, out_features=512, bias=True)\n",
      "    (7): ReLU()\n",
      "    (8): Dropout(p=0.25)\n",
      "    (9): Linear(in_features=512, out_features=102, bias=True)\n",
      "    (10): LogSoftmax()\n",
      "  )\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "# TODO: Write a function that loads a checkpoint and rebuilds the model\n",
    "def load_checkpoint(filepath):\n",
    "    checkpoint = torch.load(filepath)\n",
    "    classifier = build_classifier(\n",
    "                            checkpoint['input_size'],\n",
    "                            checkpoint['hidden_layers'],\n",
    "                            checkpoint['output'],\n",
    "                            checkpoint['dropout'])\n",
    "    model.classifier = classifier\n",
    "    model.load_state_dict = checkpoint['state_dict']\n",
    "    model.class_to_idx = checkpoint['class_to_idx']\n",
    "    return model\n",
    "\n",
    "model = load_checkpoint(checkpoint_path)\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inference for classification\n",
    "\n",
    "Now you'll write a function to use a trained network for inference. That is, you'll pass an image into the network and predict the class of the flower in the image. Write a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like \n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```\n",
    "\n",
    "First you'll need to handle processing the input image such that it can be used in your network. \n",
    "\n",
    "## Image Preprocessing\n",
    "\n",
    "You'll want to use `PIL` to load the image ([documentation](https://pillow.readthedocs.io/en/latest/reference/Image.html)). It's best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. \n",
    "\n",
    "First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the [`thumbnail`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) or [`resize`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) methods. Then you'll need to crop out the center 224x224 portion of the image.\n",
    "\n",
    "Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You'll need to convert the values. It's easiest with a Numpy array, which you can get from a PIL image like so `np_image = np.array(pil_image)`.\n",
    "\n",
    "As before, the network expects the images to be normalized in a specific way. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`. You'll want to subtract the means from each color channel, then divide by the standard deviation. \n",
    "\n",
    "And finally, PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array. You can reorder dimensions using [`ndarray.transpose`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.transpose.html). The color channel needs to be first and retain the order of the other two dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def process_image(image_path):\n",
    "    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,\n",
    "        returns an Numpy array\n",
    "    '''\n",
    "    img = Image.open(image_path)\n",
    "    img_transforms = transforms.Compose([\n",
    "                                        transforms.Resize(256),\n",
    "                                        transforms.CenterCrop(224),\n",
    "                                        transforms.ToTensor()])\n",
    "    img = img_transforms(img).float()\n",
    "    img = img.to('cuda')\n",
    "    np_image = np.array(img)\n",
    "\n",
    "    \n",
    "    means = [0.485, 0.456, 0.406]\n",
    "    std_devs = [0.229, 0.224, 0.225]\n",
    "    \n",
    "    np_image = (np.transpose(np_image,(1,2,0)) - means) / std_devs\n",
    "    np_image = np.transpose(np_image, (2,0,1))\n",
    "    \n",
    "    return np_image\n",
    "    # TODO: Process a PIL image for use in a PyTorch model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = os.path.join(data_dir, 'test', '1', 'image_06743.jpg')\n",
    "img = process_image(path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your `process_image` function works, running the output through this function should return the original image (except for the cropped out portions)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def imshow(image, ax=None, title=None):\n",
    "    if ax is None:\n",
    "        fig, ax = plt.subplots()\n",
    "    \n",
    "    # PyTorch tensors assume the color channel is the first dimension\n",
    "    # but matplotlib assumes is the third dimension\n",
    "    image = image.transpose((1, 2, 0))\n",
    "    \n",
    "    # Undo preprocessing\n",
    "    mean = np.array([0.485, 0.456, 0.406])\n",
    "    std = np.array([0.229, 0.224, 0.225])\n",
    "    image = std * image + mean\n",
    "    \n",
    "    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed\n",
    "    image = np.clip(image, 0, 1)\n",
    "    \n",
    "    ax.imshow(image)\n",
    "    \n",
    "    return ax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f63f5fa2f60>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f63f5fb0fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(img)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class Prediction\n",
    "\n",
    "Once you can get images in the correct format, it's time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You'll want to calculate the class probabilities then find the $K$ largest values.\n",
    "\n",
    "To get the top $K$ largest values in a tensor use [`x.topk(k)`](http://pytorch.org/docs/master/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using `class_to_idx` which hopefully you added to the model or from an `ImageFolder` you used to load the data ([see here](#Save-the-checkpoint)). Make sure to invert the dictionary so you get a mapping from index to class as well.\n",
    "\n",
    "Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.\n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.010997639037668705, 0.010502150282263756, 0.010499471798539162, 0.010471601970493793, 0.0104293804615736]\n",
      "['thorn apple', 'trumpet creeper', 'pincushion flower', 'windflower', 'orange dahlia']\n"
     ]
    }
   ],
   "source": [
    "def predict(image_path, model, topk=5):\n",
    "    ''' Predict the class (or classes) of an image using a trained deep learning model.\n",
    "    '''\n",
    "    img_numpy =  process_image(image_path)\n",
    "    \n",
    "    img = torch.from_numpy(img_numpy)\n",
    "    img = img.unsqueeze_(0)\n",
    "    img = img.float()\n",
    "    \n",
    "    model.eval()   \n",
    "    \n",
    "    model.to('cuda')\n",
    "    img = img.to('cuda')\n",
    "\n",
    "    with torch.no_grad():\n",
    "        output = model.forward(img)\n",
    "        \n",
    "    # get props\n",
    "    probability = torch.exp(output.data)\n",
    "    \n",
    "    # get top k procs\n",
    "    top_probs, top_labs = probability.topk(topk)\n",
    "\n",
    "    # convert to numpy lists\n",
    "    top_probs = top_probs.cpu().numpy()[0].tolist()\n",
    "    top_labs = top_labs.cpu().numpy()[0].tolist()\n",
    "\n",
    "    # reverse class_to_idx\n",
    "    idx_to_class = {val: key for key, val in model.class_to_idx.items() }\n",
    "\n",
    "    # map to classes from file and to string labels\n",
    "    top_labels = [idx_to_class[label] for label in top_labs]\n",
    "    top_flowers = [cat_to_name[idx_to_class[label]] for label in top_labs]\n",
    "\n",
    "    return top_probs, top_labels, top_flowers\n",
    "    \n",
    "probs, labels, flowers = predict(path, model, 5)\n",
    "print(probs)\n",
    "print(flowers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity Checking\n",
    "\n",
    "Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it's always good to check that there aren't obvious bugs. Use `matplotlib` to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:\n",
    "\n",
    "<img src='assets/inference_example.png' width=300px>\n",
    "\n",
    "You can convert from the class integer encoding to actual flower names with the `cat_to_name.json` file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the `imshow` function defined above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f638d42d6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def view_classes(img, probs, labels):\n",
    "    fig, (ax1, ax2) = plt.subplots(figsize=(10,10), ncols=2)\n",
    "    imshow(img, ax2, labels[0])\n",
    "    ax1.barh(np.arange(len(probs)), probs)\n",
    "    ax1.set_aspect(0.1)\n",
    "    ax1.set_yticks(np.arange(len(probs)))\n",
    "    ax1.set_yticklabels(labels)\n",
    "    ax1.set_title('Class Probability')\n",
    "    ax1.set_xlim(0, 1,1)\n",
    "    \n",
    "def sanity_check(path, model, topk):\n",
    "    img = process_image(path)\n",
    "    probs, labels, flowers = predict(path, model, 5)\n",
    "    \n",
    "    view_classes(img, probs, flowers)\n",
    "    \n",
    "path = os.path.join(data_dir, 'test', '38', 'image_05833.jpg')\n",
    "sanity_check(path, model, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
